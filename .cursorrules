# CSS Organization Rules

## NEVER put CSS or styles directly in .tsx files
- All CSS must be in separate .css files
- Use CSS Modules (.module.css) for component-specific styles
- Use globals.css only for truly global styles
- **ABSOLUTELY NO inline styles in JSX** (style={{...}})
- **ABSOLUTELY NO className with template literals** for dynamic styles

## CSS File Organization:
- `src/styles/globals.css` - Global styles, CSS variables, resets
- `src/styles/[component].module.css` - Component-specific styles
- `src/styles/[feature].module.css` - Feature-specific styles

## Before adding any CSS or style:
0. Evaluate if there is an existing matching css class
1. Evaluate if it's truly global → use globals.css
2. Is it component-specific → use [component].module.css
3. Is it feature-specific → use [feature].module.css
4. **NEVER use inline styles** - always create CSS classes
5. **NEVER use dynamic className generation** - use CSS variables or conditional classes

## CSS Class Naming Conventions:
- Use descriptive, semantic class names
- Use kebab-case for class names
- Use BEM methodology when appropriate
- Group related styles together
- Use CSS variables for dynamic values

## Dynamic Styling Solutions:
- Use CSS variables for dynamic values: `--custom-property: value`
- Use conditional classes: `className={condition ? 'class-a' : 'class-b'}`
- Use CSS modules with computed class names
- Use CSS-in-JS libraries only when absolutely necessary

## Always ask before adding CSS:
- "Should this go in globals.css or a module?"
- "Is this style reusable across components?"
- "Can this be achieved with CSS variables?"
- "Is there an existing class I can reuse or extend?"
- "Can I avoid inline styles by creating a proper CSS class?"

# TypeScript & Build Rules

## NEVER use `any` type
- Use proper types: `(obj as { prop: string }).prop` instead of `(obj as any).prop`
- Create interfaces for complex objects
- Use `unknown` only when type is truly unknown

## Handle Optional Properties
- Always use `??` for optional properties: `value.prop ?? defaultValue`
- Check for undefined: `(obj.prop ?? '')` for strings, `(obj.prop ?? 0)` for numbers
- Use type guards: `'prop' in obj` instead of `(obj as any).prop`

## Build Compliance
- All code must pass `npm run build` without errors
- Remove unused functions and variables immediately
- Use proper type assertions, not `any`
- Handle all possible undefined values

## Before generating code:
1. "Will this pass TypeScript strict mode?"
2. "Are all optional properties handled with `??`?"
3. "Am I using proper types instead of `any`?"